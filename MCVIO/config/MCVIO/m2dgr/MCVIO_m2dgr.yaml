%YAML:1.0

# enum camera_type
# {
#     MONOCULAR,
#     UNKNOWN
# };
imageMsg_type: "CompressedImage"
imu_topic: "/handsfree/imu"
depth_topic: "/velodyne_points"
laser_topic: "/velodyne_points"
odom_topic: "/integrated_to_init"
output_path: "/home/ros/dev_workspace/MCVIO_ws/src/MCVIO/MCVIO/results"

lio_world_frame: "sensor_init"
vins_world_frame: "vins_world"
camera_frame: "vins_camera"
lio_laser_frame: "sensor"
laser_frame: "sensor"
vins_imu_frame: "vins_imu"

use_lidar_odom_meas: 0 # 1   means use lidar odometry constraints in vins system
scale_lidar_absolute_factor: 3

align_camera_lidar_estimation: 0 # align camera and lidar estimation for visualization

sensor_list: ['cam_0','cam_1']

cam_0:
  sensor_type: 0
  left_image_topic: "/camera/left/image_raw/compressed"
  frame_id: "camera_left"
  camera_config_file: "/home/ros/dev_workspace/MCVIO_ws/src/MCVIO/MCVIO/config/MCVIO/m2dgr/left_right/cam_0.yaml"
  extrinsicRotation_imu_camera: !!opencv-matrix
    rows: 3
    cols: 3
    dt: d
    data: [0, 0, 1,
          -1, 0, 0,
          0, -1, 0]
  #Translation from camera frame to imu frame, imu^T_cam
  extrinsicTranslation_imu_camera: !!opencv-matrix
    rows: 3
    cols: 1
    dt: d
    data: [0.51476, 0.1607, 0.01243]
  #feature traker parameters
  max_cnt: 200          # max feature number in feature tracking
  min_dist: 20            # min distance between two features
  freq: 13                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
  F_threshold: 1.0        # ransac threshold (pixel)
  show_track: 1           # publish tracking image as topic
  equalize: 1             # if image is too dark or light, trun on equalize to find enough features
  fisheye: 0             # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
  fisheye_path: "/home/ros/dev_workspace/MCVIO_ws/src/MCVIO/MCVIO/config/MCVIO/fisheye_mask.jpg"
  image_width: 1280
  image_height: 1024
  visualize: 1
  use_vpi: 0
  mirror_parameters:
    xi: 1.9370645285718184
  distortion_parameters:
    k1: -0.07015146608431883
    k2: 0.008586142263125124
    p1: -0.021968993685891842
    p2: 0.007442211946112636
  projection_parameters:
    fx: 540.645056202188
    fy: 539.8545023658869
    cx: 626.4125666883942
    cy: 523.947634226782

cam_1:
  sensor_type: 0
  left_image_topic: "/camera/right/image_raw/compressed"
  frame_id: "camera_right"
  camera_config_file: "/home/ros/dev_workspace/MCVIO_ws/src/MCVIO/MCVIO/config/MCVIO/m2dgr/left_right/cam_1.yaml"
  extrinsicRotation_imu_camera: !!opencv-matrix
    rows: 3
    cols: 3
    dt: d
    data: [0, 0, 1,
          -1, 0, 0,
          0, -1, 0]
  #Translation from camera frame to imu frame, imu^T_cam
  extrinsicTranslation_imu_camera: !!opencv-matrix
    rows: 3
    cols: 1
    dt: d
    data: [0.514563, -0.16078, 0.0123]
  #feature traker paprameters
  max_cnt: 200          # max feature number in feature tracking
  min_dist: 12            # min distance between two features
  freq: 13                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
  F_threshold: 1.0        # ransac threshold (pixel)
  show_track: 1           # publish tracking image as topic
  equalize: 1             # if image is too dark or light, trun on equalize to find enough features
  fisheye: 0             # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
  fisheye_path: "/home/ros/dev_workspace/MCVIO_ws/src/MCVIO/MCVIO/config/MCVIO/fisheye_mask.jpg"
  image_width: 1280
  image_height: 1024
  visualize: 1
  use_vpi: 0
  mirror_parameters:
    xi: 1.8075725317445792
  distortion_parameters:
    k1: -0.07147685334620411
    k2: 0.006423830171528276
    p1: -0.02354604292216998
    p2: 0.009181757660952325
  projection_parameters:
    fx: 540.6832252229977
    fy: 539.3921307247979
    cx: 632.9173957218305
    cy: 503.3766864767991

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
  # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
# 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
#for handheld, wheeld
acc_n: 3.7686306102624571e-02          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 2.3417543020438883e-03         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 1.1416642385952368e-03         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 1.4428407712885209e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5

#for tracked applications
#acc_n: 0.5          # accelerometer measurement noise standard deviation. #0.2
#gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05
#acc_w: 0.001         # accelerometer bias random work noise standard deviation.  #0.02
#gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5



g_norm: 9.81007       # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
fast_relocalization: 0             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/shiboz/visual_odometry/VINS-RGBD" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: -0.073162                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ

# Kd tree search parameter
lidar_search_radius: 0.1

# debug
# whether to estimate scale when lidar provided
estimate_scale: 1
scale: 0.5
depth_support_init: 0
skip_default_init_method: 0

# PnP simple init, depth information should be provided
PnP_simple_init: 0


#rolling shutter parameters
rolling_shutter: 0                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet).
